{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/devtoolsPanel/components/outputFunction/outputFunction.js","webpack:///./src/devtoolsPanel/external/jsbeautify.js"],"names":["ownerDocument","document","currentScript","outputFunction","Object","create","HTMLDivElement","prototype","createdCallback","template","querySelector","clone","importNode","content","shadowRoot","createShadowRoot","appendChild","oldValue","textContent","observer","MutationObserver","mutations","forEach","mutation","target","newValue","update","observe","attributes","childList","characterData","text","pre","createElement","innerHTML","registerElement","acorn","exports","nonASCIIwhitespace","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","RegExp","nonASCIIidentifier","newline","lineBreak","isIdentifierStart","code","test","String","fromCharCode","isIdentifierChar","in_array","what","arr","i","length","trim","s","replace","ltrim","rtrim","js_beautify","js_source_text","options","beautifier","Beautifier","beautify","MODE","BlockStatement","Statement","ObjectLiteral","ArrayLiteral","ForInitializer","Conditional","Expression","output","tokens","token_pos","Tokenizer","current_token","last_type","last_last_text","indent_string","flags","previous_flags","flag_store","prefix","handlers","opt","baseIndentString","handle_start_expr","handle_end_expr","handle_start_block","handle_end_block","handle_word","handle_semicolon","handle_string","handle_equals","handle_operator","handle_comma","handle_block_comment","handle_comment","handle_dot","handle_unknown","handle_eof","create_flags","flags_base","mode","next_indent_level","indentation_level","just_added_newline","line_indent_level","next_flags","parent","last_text","last_word","declaration_statement","declaration_assignment","multiline_frame","if_block","else_block","do_block","do_while","in_case_statement","in_case","case_body","start_line_index","get_line_number","ternary_depth","braces_on_own_line","undefined","brace_style","indent_size","parseInt","indent_char","eol","preserve_newlines","break_chained_methods","max_preserve_newlines","space_in_paren","space_in_empty_paren","jslint_happy","space_after_anon_function","keep_array_indentation","space_before_conditional","unescape_strings","wrap_line_length","e4x","end_with_newline","comma_first","test_output_raw","indent_with_tabs","preindent_index","charAt","substring","Output","raw","set_mode","local_token","sweet_code","tokenizer","tokenize","get_token","comments_before","handle_token","type","get_code","newlines","keep_whitespace","is_array","print_newline","split_newlines","out","idx","indexOf","push","allow_wrap_or_preserved_newline","force_linewrap","wanted_newline","proposed_line_length","current_line","get_character_count","space_before_token","force_newline","preserve_statement_flags","restore_mode","add_new_line","print_token_line_indentation","whitespace_before","set_indent","print_token","printable_token","add_raw_token","previous_line","last","pop","add_token","indent","deindent","is_expression","remove_redundant_indentation","start_of_object_property","start_of_statement","all_lines_start_with","lines","c","line","each_line_matches_indent","len","is_special_word","word","offset","index","next_mode","line_starters","next_token","second_token","empty_braces","empty_anonymous_function","just_added_blankline","space_before","space_after","directives","j","javadoc","starless","lastIndent","lastIndentLength","slice","OutputLine","_character_count","_indent_count","_items","_empty","level","baseIndentLength","indent_length","is_empty","input","item","remove_indent","toString","result","indent_cache","join","add_outputline","token","x","add_space_before_token","frame","output_length","eat_newlines","Token","opts","whitespace","split","digit","digit_hex","punct","reserved_words","concat","block_comment_pattern","comment_pattern","directives_block_pattern","directive_pattern","directives_end_ignore_pattern","template_pattern","n_newlines","whitespace_before_token","in_html_comment","parser_pos","input_length","next","token_values","open","open_stack","comments","tokenize_next","get_directives","match","lastIndex","directive_match","exec","resulting_string","whitespace_on_this_line","last_token","allow_decimal","allow_e","local_digit","charCodeAt","comment","comment_match","sep","esc","has_char_escapes","in_char_class","xmlRegExp","xmlStr","rootTag","depth","isEndTag","tagName","isSingletonTag","xmlLength","unescape_string","sharp","template_match","pos","s_hex","escaped","substr","define"],"mappings":"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","file":"component-outputFunction.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","import js_beautify from \"../../external/jsbeautify.js\";\n\n(function() {\n    var ownerDocument = document.currentScript.ownerDocument;\n\n    var outputFunction = Object.create(HTMLDivElement.prototype);\n\n    outputFunction.createdCallback = function(){\n        var template = ownerDocument.querySelector(\"template\");\n\n        var clone = document.importNode(template.content, true);\n\n        var shadowRoot = this.shadowRoot || this.createShadowRoot();\n            shadowRoot.appendChild(clone);\n\n        var oldValue = this.textContent;\n        var observer = new MutationObserver(function(mutations) {\n            mutations.forEach(function(mutation) {\n                var target = mutation.target;\n                var newValue = target.textContent;\n                if(oldValue !== newValue) {\n                    target.update();\n                }\n                oldValue = newValue;\n            })\n        });\n\n        observer.observe(this, {\n            attributes: false,\n            childList: true,\n            characterData: true\n        });\n    };\n\n    outputFunction.update = function() {\n        var shadowRoot = this.shadowRoot || this.createShadowRoot();\n        //shadowRoot.querySelector(\"pre\").remove();\n\n        var text = this.textContent;\n        \n        var pre = document.createElement(\"pre\");\n        pre.innerHTML = js_beautify(text);\n        \n        shadowRoot.appendChild(pre);\n    };\n\n    document.registerElement('aurainspector-outputFunction', {\n        prototype: outputFunction\n    });\n\n})();","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\nThe MIT License (MIT)\n\nCopyright (c) 2007-2013 Einar Lielmanis and contributors.\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\nBE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nJS Beautifier\n---------------\n\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\n  http://jsbeautifier.org/\n\nOriginally converted to javascript by Vital, <vital76@gmail.com>\n\"End braces on own line\" added by Chris J. Shull, <chrisjshull@gmail.com>\nParsing improvements for brace-less statements by Liam Newman <bitwiseman@gmail.com>\n\n\nUsage:\njs_beautify(js_source_text);\njs_beautify(js_source_text, options);\n\nThe options are:\nindent_size (default 4)          - indentation size,\nindent_char (default space)      - character to indent with,\npreserve_newlines (default true) - whether existing line breaks should be preserved,\nmax_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,\n\njslint_happy (default false) - if true, then jslint-stricter mode is enforced.\n\n        jslint_happy        !jslint_happy\n        ---------------------------------\n        function ()         function()\n\n        switch () {         switch() {\n        case 1:               case 1:\n          break;                break;\n        }                   }\n\nspace_after_anon_function (default false) - should the space before an anonymous function's parens be added, \"function()\" vs \"function ()\",\n      NOTE: This option is overriden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)\n\nbrace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\" | \"none\"\n        put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.\n\nspace_before_conditional (default true) - should the space before conditional statement be added, \"if(true)\" vs \"if (true)\",\n\nunescape_strings (default false) - should printable characters in strings encoded in \\xNN notation be unescaped, \"example\" vs \"\\x65\\x78\\x61\\x6d\\x70\\x6c\\x65\"\n\nwrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.\n      NOTE: This is not a hard limit. Lines will continue until a point where a newline would\n            be preserved if it were present.\n\nend_with_newline (default false)  - end output with a newline\n\n\ne.g\n\njs_beautify(js_source_text, {\n  'indent_size': 1,\n  'indent_char': '\\t'\n});\n\n*/\n\n\nvar acorn = {};\n(function (exports) {\n  // This section of code is taken from acorn.\n  //\n  // Acorn was written by Marijn Haverbeke and released under an MIT\n  // license. The Unicode regexps (for identifiers and whitespace) were\n  // taken from [Esprima](http://esprima.org) by Ariya Hidayat.\n  //\n  // Git repositories for Acorn are available at\n  //\n  //     http://marijnhaverbeke.nl/git/acorn\n  //     https://github.com/marijnh/acorn.git\n\n  // ## Character categories\n\n  // Big ugly regular expressions that match characters in the\n  // whitespace, identifier, and identifier-start categories. These\n  // are only applied when a character is found to actually have a\n  // code point above 128.\n\n  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n  var nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n  // Whether a single character denotes a newline.\n\n  var newline = exports.newline = /[\\n\\r\\u2028\\u2029]/;\n\n  // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = exports.lineBreak = /\\r\\n|[\\n\\r\\u2028\\u2029]/g;\n\n  // Test whether a given character code starts an identifier.\n\n  var isIdentifierStart = exports.isIdentifierStart = function(code) {\n    if (code < 65) return code === 36;\n    if (code < 91) return true;\n    if (code < 97) return code === 95;\n    if (code < 123)return true;\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  };\n\n  // Test whether a given character is part of an identifier.\n\n  var isIdentifierChar = exports.isIdentifierChar = function(code) {\n    if (code < 48) return code === 36;\n    if (code < 58) return true;\n    if (code < 65) return false;\n    if (code < 91) return true;\n    if (code < 97) return code === 95;\n    if (code < 123)return true;\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  };\n})(acorn);\n\nfunction in_array(what, arr) {\n    for (var i = 0; i < arr.length; i += 1) {\n        if (arr[i] === what) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction trim(s) {\n    return s.replace(/^\\s+|\\s+$/g, '');\n}\n\nfunction ltrim(s) {\n    return s.replace(/^\\s+/g, '');\n}\n\nfunction rtrim(s) {\n    return s.replace(/\\s+$/g, '');\n}\n\nfunction js_beautify(js_source_text, options) {\n    \"use strict\";\n    var beautifier = new Beautifier(js_source_text, options);\n    return beautifier.beautify();\n}\n\nvar MODE = {\n        BlockStatement: 'BlockStatement', // 'BLOCK'\n        Statement: 'Statement', // 'STATEMENT'\n        ObjectLiteral: 'ObjectLiteral', // 'OBJECT',\n        ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',\n        ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',\n        Conditional: 'Conditional', //'(COND-EXPRESSION)',\n        Expression: 'Expression' //'(EXPRESSION)'\n    };\n\nfunction Beautifier(js_source_text, options) {\n    \"use strict\";\n    var output\n    var tokens = [], token_pos;\n    var Tokenizer;\n    var current_token;\n    var last_type, last_last_text, indent_string;\n    var flags, previous_flags, flag_store;\n    var prefix;\n\n    var handlers, opt;\n    var baseIndentString = '';\n\n    handlers = {\n        'TK_START_EXPR': handle_start_expr,\n        'TK_END_EXPR': handle_end_expr,\n        'TK_START_BLOCK': handle_start_block,\n        'TK_END_BLOCK': handle_end_block,\n        'TK_WORD': handle_word,\n        'TK_RESERVED': handle_word,\n        'TK_SEMICOLON': handle_semicolon,\n        'TK_STRING': handle_string,\n        'TK_EQUALS': handle_equals,\n        'TK_OPERATOR': handle_operator,\n        'TK_COMMA': handle_comma,\n        'TK_BLOCK_COMMENT': handle_block_comment,\n        'TK_COMMENT': handle_comment,\n        'TK_DOT': handle_dot,\n        'TK_UNKNOWN': handle_unknown,\n        'TK_EOF': handle_eof\n    };\n\n    function create_flags(flags_base, mode) {\n        var next_indent_level = 0;\n        if (flags_base) {\n            next_indent_level = flags_base.indentation_level;\n            if (!output.just_added_newline() &&\n                flags_base.line_indent_level > next_indent_level) {\n                next_indent_level = flags_base.line_indent_level;\n            }\n        }\n\n        var next_flags = {\n            mode: mode,\n            parent: flags_base,\n            last_text: flags_base ? flags_base.last_text : '', // last token text\n            last_word: flags_base ? flags_base.last_word : '', // last 'TK_WORD' passed\n            declaration_statement: false,\n            declaration_assignment: false,\n            multiline_frame: false,\n            if_block: false,\n            else_block: false,\n            do_block: false,\n            do_while: false,\n            in_case_statement: false, // switch(..){ INSIDE HERE }\n            in_case: false, // we're on the exact line with \"case 0:\"\n            case_body: false, // the indented case-action block\n            indentation_level: next_indent_level,\n            line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,\n            start_line_index: output.get_line_number(),\n            ternary_depth: 0\n        };\n        return next_flags;\n    }\n\n    // Some interpreters have unexpected results with foo = baz || bar;\n    options = options ? options : {};\n    opt = {};\n\n    // compatibility\n    if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option\n        opt.brace_style = options.braces_on_own_line ? \"expand\" : \"collapse\";\n    }\n    opt.brace_style = options.brace_style ? options.brace_style : (opt.brace_style ? opt.brace_style : \"collapse\");\n\n    // graceful handling of deprecated option\n    if (opt.brace_style === \"expand-strict\") {\n        opt.brace_style = \"expand\";\n    }\n\n\n    opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;\n    opt.indent_char = options.indent_char ? options.indent_char : ' ';\n    opt.eol = options.eol ? options.eol : '\\n';\n    opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;\n    opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;\n    opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);\n    opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;\n    opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;\n    opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;\n    opt.space_after_anon_function = (options.space_after_anon_function === undefined) ? false : options.space_after_anon_function;\n    opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;\n    opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;\n    opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;\n    opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);\n    opt.e4x = (options.e4x === undefined) ? false : options.e4x;\n    opt.end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n    opt.comma_first = (options.comma_first === undefined) ? false : options.comma_first;\n\n    // For testing of beautify ignore:start directive\n    opt.test_output_raw = (options.test_output_raw === undefined) ? false : options.test_output_raw;\n\n    // force opt.space_after_anon_function to true if opt.jslint_happy\n    if(opt.jslint_happy) {\n        opt.space_after_anon_function = true;\n    }\n\n    if(options.indent_with_tabs){\n        opt.indent_char = '\\t';\n        opt.indent_size = 1;\n    }\n\n    opt.eol = opt.eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n')\n\n    //----------------------------------\n    indent_string = '';\n    while (opt.indent_size > 0) {\n        indent_string += opt.indent_char;\n        opt.indent_size -= 1;\n    }\n\n    var preindent_index = 0;\n    if(js_source_text && js_source_text.length) {\n        while ( (js_source_text.charAt(preindent_index) === ' ' ||\n                js_source_text.charAt(preindent_index) === '\\t')) {\n            baseIndentString += js_source_text.charAt(preindent_index);\n            preindent_index += 1;\n        }\n        js_source_text = js_source_text.substring(preindent_index);\n    }\n\n    last_type = 'TK_START_BLOCK'; // last token type\n    last_last_text = ''; // pre-last token text\n    output = new Output(indent_string, baseIndentString);\n\n    // If testing the ignore directive, start with output disable set to true\n    output.raw = opt.test_output_raw;\n\n\n    // Stack of parsing/formatting states, including MODE.\n    // We tokenize, parse, and output in an almost purely a forward-only stream of token input\n    // and formatted output.  This makes the beautifier less accurate than full parsers\n    // but also far more tolerant of syntax errors.\n    //\n    // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type\n    // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later\n    // encounter a \":\", we'll switch to to MODE.ObjectLiteral.  If we then see a \";\",\n    // most full parsers would die, but the beautifier gracefully falls back to\n    // MODE.BlockStatement and continues on.\n    flag_store = [];\n    set_mode(MODE.BlockStatement);\n\n    this.beautify = function() {\n\n        /*jshint onevar:true */\n        var local_token, sweet_code;\n        Tokenizer = new tokenizer(js_source_text, opt, indent_string);\n        tokens = Tokenizer.tokenize();\n        token_pos = 0;\n\n        while (local_token = get_token()) {\n            for(var i = 0; i < local_token.comments_before.length; i++) {\n                // The cleanest handling of inline comments is to treat them as though they aren't there.\n                // Just continue formatting and the behavior should be logical.\n                // Also ignore unknown tokens.  Again, this should result in better behavior.\n                handle_token(local_token.comments_before[i]);\n            }\n            handle_token(local_token);\n\n            last_last_text = flags.last_text;\n            last_type = local_token.type;\n            flags.last_text = local_token.text;\n\n            token_pos += 1;\n        }\n\n        sweet_code = output.get_code();\n        if (opt.end_with_newline) {\n            sweet_code += '\\n';\n        }\n\n        if (opt.eol != '\\n') {\n            sweet_code = sweet_code.replace(/[\\n]/g, opt.eol);\n        }\n\n        return sweet_code;\n    };\n\n    function handle_token(local_token) {\n        var newlines = local_token.newlines;\n        var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);\n\n        if (keep_whitespace) {\n            for (i = 0; i < newlines; i += 1) {\n                print_newline(i > 0);\n            }\n        } else {\n            if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {\n                newlines = opt.max_preserve_newlines;\n            }\n\n            if (opt.preserve_newlines) {\n                if (local_token.newlines > 1) {\n                    print_newline();\n                    for (var i = 1; i < newlines; i += 1) {\n                        print_newline(true);\n                    }\n                }\n            }\n        }\n\n        current_token = local_token;\n        handlers[current_token.type]();\n    }\n\n    // we could use just string.split, but\n    // IE doesn't like returning empty strings\n    function split_newlines(s) {\n        //return s.split(/\\x0d\\x0a|\\x0a/);\n\n        s = s.replace(/\\x0d/g, '');\n        var out = [],\n            idx = s.indexOf(\"\\n\");\n        while (idx !== -1) {\n            out.push(s.substring(0, idx));\n            s = s.substring(idx + 1);\n            idx = s.indexOf(\"\\n\");\n        }\n        if (s.length) {\n            out.push(s);\n        }\n        return out;\n    }\n\n    function allow_wrap_or_preserved_newline(force_linewrap) {\n        force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;\n\n        // Never wrap the first token on a line\n        if (output.just_added_newline()) {\n            return\n        }\n\n        if ((opt.preserve_newlines && current_token.wanted_newline) || force_linewrap) {\n            print_newline(false, true);\n        } else if (opt.wrap_line_length) {\n            var proposed_line_length = output.current_line.get_character_count() + current_token.text.length +\n                (output.space_before_token ? 1 : 0);\n            if (proposed_line_length >= opt.wrap_line_length) {\n                print_newline(false, true);\n            }\n        }\n    }\n\n    function print_newline(force_newline, preserve_statement_flags) {\n        if (!preserve_statement_flags) {\n            if (flags.last_text !== ';' && flags.last_text !== ',' && flags.last_text !== '=' && last_type !== 'TK_OPERATOR') {\n                while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {\n                    restore_mode();\n                }\n            }\n        }\n\n        if (output.add_new_line(force_newline)) {\n            flags.multiline_frame = true;\n        }\n    }\n\n    function print_token_line_indentation() {\n        if (output.just_added_newline()) {\n            if (opt.keep_array_indentation && is_array(flags.mode) && current_token.wanted_newline) {\n                output.current_line.push(current_token.whitespace_before);\n                output.space_before_token = false;\n            } else if (output.set_indent(flags.indentation_level)) {\n                flags.line_indent_level = flags.indentation_level;\n            }\n        }\n    }\n\n    function print_token(printable_token) {\n        if (output.raw) {\n            output.add_raw_token(current_token)\n            return;\n        }\n\n        if (opt.comma_first && last_type === 'TK_COMMA'\n            && output.just_added_newline()) {\n            if(output.previous_line.last() === ',') {\n                output.previous_line.pop();\n                print_token_line_indentation();\n                output.add_token(',');\n                output.space_before_token = true;\n            }\n        }\n\n        printable_token = printable_token || current_token.text;\n        print_token_line_indentation();\n        output.add_token(printable_token);\n    }\n\n    function indent() {\n        flags.indentation_level += 1;\n    }\n\n    function deindent() {\n        if (flags.indentation_level > 0 &&\n            ((!flags.parent) || flags.indentation_level > flags.parent.indentation_level))\n            flags.indentation_level -= 1;\n    }\n\n    function set_mode(mode) {\n        if (flags) {\n            flag_store.push(flags);\n            previous_flags = flags;\n        } else {\n            previous_flags = create_flags(null, mode);\n        }\n\n        flags = create_flags(previous_flags, mode);\n    }\n\n    function is_array(mode) {\n        return mode === MODE.ArrayLiteral;\n    }\n\n    function is_expression(mode) {\n        return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);\n    }\n\n    function restore_mode() {\n        if (flag_store.length > 0) {\n            previous_flags = flags;\n            flags = flag_store.pop();\n            if (previous_flags.mode === MODE.Statement) {\n                output.remove_redundant_indentation(previous_flags);\n            }\n        }\n    }\n\n    function start_of_object_property() {\n        return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (\n            (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set'])));\n    }\n\n    function start_of_statement() {\n        if (\n                (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') ||\n                (last_type === 'TK_RESERVED' && flags.last_text === 'do') ||\n                (last_type === 'TK_RESERVED' && flags.last_text === 'return' && !current_token.wanted_newline) ||\n                (last_type === 'TK_RESERVED' && flags.last_text === 'else' && !(current_token.type === 'TK_RESERVED' && current_token.text === 'if')) ||\n                (last_type === 'TK_END_EXPR' && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional)) ||\n                (last_type === 'TK_WORD' && flags.mode === MODE.BlockStatement\n                    && !flags.in_case\n                    && !(current_token.text === '--' || current_token.text === '++')\n                    && last_last_text !== 'function'\n                    && current_token.type !== 'TK_WORD' && current_token.type !== 'TK_RESERVED') ||\n                (flags.mode === MODE.ObjectLiteral && (\n                    (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set']))))\n            ) {\n\n            set_mode(MODE.Statement);\n            indent();\n\n            if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') {\n                flags.declaration_statement = true;\n            }\n\n            // Issue #276:\n            // If starting a new statement with [if, for, while, do], push to a new line.\n            // if (a) if (b) if(c) d(); else e(); else f();\n            if (!start_of_object_property()) {\n                allow_wrap_or_preserved_newline(\n                    current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['do', 'for', 'if', 'while']));\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    function all_lines_start_with(lines, c) {\n        for (var i = 0; i < lines.length; i++) {\n            var line = trim(lines[i]);\n            if (line.charAt(0) !== c) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function each_line_matches_indent(lines, indent) {\n        var i = 0,\n            len = lines.length,\n            line;\n        for (; i < len; i++) {\n            line = lines[i];\n            // allow empty lines to pass through\n            if (line && line.indexOf(indent) !== 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function is_special_word(word) {\n        return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);\n    }\n\n    function get_token(offset) {\n        var index = token_pos + (offset || 0);\n        return (index < 0 || index >= tokens.length) ? null : tokens[index];\n    }\n\n    function handle_start_expr() {\n        if (start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n        }\n\n        var next_mode = MODE.Expression;\n        if (current_token.text === '[') {\n\n            if (last_type === 'TK_WORD' || flags.last_text === ')') {\n                // this is array index specifier, break immediately\n                // a[x], fn()[x]\n                if (last_type === 'TK_RESERVED' && in_array(flags.last_text, Tokenizer.line_starters)) {\n                    output.space_before_token = true;\n                }\n                set_mode(next_mode);\n                print_token();\n                indent();\n                if (opt.space_in_paren) {\n                    output.space_before_token = true;\n                }\n                return;\n            }\n\n            next_mode = MODE.ArrayLiteral;\n            if (is_array(flags.mode)) {\n                if (flags.last_text === '[' ||\n                    (flags.last_text === ',' && (last_last_text === ']' || last_last_text === '}'))) {\n                    // ], [ goes to new line\n                    // }, [ goes to new line\n                    if (!opt.keep_array_indentation) {\n                        print_newline();\n                    }\n                }\n            }\n\n        } else {\n            if (last_type === 'TK_RESERVED' && flags.last_text === 'for') {\n                next_mode = MODE.ForInitializer;\n            } else if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['if', 'while'])) {\n                next_mode = MODE.Conditional;\n            } else {\n                // next_mode = MODE.Expression;\n            }\n        }\n\n        if (flags.last_text === ';' || last_type === 'TK_START_BLOCK') {\n            print_newline();\n        } else if (last_type === 'TK_END_EXPR' || last_type === 'TK_START_EXPR' || last_type === 'TK_END_BLOCK' || flags.last_text === '.') {\n            // TODO: Consider whether forcing this is required.  Review failing tests when removed.\n            allow_wrap_or_preserved_newline(current_token.wanted_newline);\n            // do nothing on (( and )( and ][ and ]( and .(\n        } else if (!(last_type === 'TK_RESERVED' && current_token.text === '(') && last_type !== 'TK_WORD' && last_type !== 'TK_OPERATOR') {\n            output.space_before_token = true;\n        } else if ((last_type === 'TK_RESERVED' && (flags.last_word === 'function' || flags.last_word === 'typeof')) ||\n            (flags.last_text === '*' && last_last_text === 'function')) {\n            // function() vs function ()\n            if (opt.space_after_anon_function) {\n                output.space_before_token = true;\n            }\n        } else if (last_type === 'TK_RESERVED' && (in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === 'catch')) {\n            if (opt.space_before_conditional) {\n                output.space_before_token = true;\n            }\n        }\n\n        // Should be a space between await and an IIFE\n        if(current_token.text === '(' && last_type === 'TK_RESERVED' && flags.last_word === 'await'){\n            output.space_before_token = true;\n        }\n\n        // Support of this kind of newline preservation.\n        // a = (b &&\n        //     (c || d));\n        if (current_token.text === '(') {\n            if (last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n                if (!start_of_object_property()) {\n                    allow_wrap_or_preserved_newline();\n                }\n            }\n        }\n\n        set_mode(next_mode);\n        print_token();\n        if (opt.space_in_paren) {\n            output.space_before_token = true;\n        }\n\n        // In all cases, if we newline while inside an expression it should be indented.\n        indent();\n    }\n\n    function handle_end_expr() {\n        // statements inside expressions are not valid syntax, but...\n        // statements must all be closed when their container closes\n        while (flags.mode === MODE.Statement) {\n            restore_mode();\n        }\n\n        if (flags.multiline_frame) {\n            allow_wrap_or_preserved_newline(current_token.text === ']' && is_array(flags.mode) && !opt.keep_array_indentation);\n        }\n\n        if (opt.space_in_paren) {\n            if (last_type === 'TK_START_EXPR' && ! opt.space_in_empty_paren) {\n                // () [] no inner space in empty parens like these, ever, ref #320\n                output.trim();\n                output.space_before_token = false;\n            } else {\n                output.space_before_token = true;\n            }\n        }\n        if (current_token.text === ']' && opt.keep_array_indentation) {\n            print_token();\n            restore_mode();\n        } else {\n            restore_mode();\n            print_token();\n        }\n        output.remove_redundant_indentation(previous_flags);\n\n        // do {} while () // no statement required after\n        if (flags.do_while && previous_flags.mode === MODE.Conditional) {\n            previous_flags.mode = MODE.Expression;\n            flags.do_block = false;\n            flags.do_while = false;\n\n        }\n    }\n\n    function handle_start_block() {\n        // Check if this is should be treated as a ObjectLiteral\n        var next_token = get_token(1)\n        var second_token = get_token(2)\n        if (second_token && (\n                (second_token.text === ':' && in_array(next_token.type, ['TK_STRING', 'TK_WORD', 'TK_RESERVED']))\n                || (in_array(next_token.text, ['get', 'set']) && in_array(second_token.type, ['TK_WORD', 'TK_RESERVED']))\n            )) {\n            // We don't support TypeScript,but we didn't break it for a very long time.\n            // We'll try to keep not breaking it.\n            if (!in_array(last_last_text, ['class','interface'])) {\n                set_mode(MODE.ObjectLiteral);\n            } else {\n                set_mode(MODE.BlockStatement);\n            }\n        } else {\n            set_mode(MODE.BlockStatement);\n        }\n\n        var empty_braces = !next_token.comments_before.length &&  next_token.text === '}';\n        var empty_anonymous_function = empty_braces && flags.last_word === 'function' &&\n            last_type === 'TK_END_EXPR';\n\n        if (opt.brace_style === \"expand\" ||\n            (opt.brace_style === \"none\" && current_token.wanted_newline)) {\n            if (last_type !== 'TK_OPERATOR' &&\n                (empty_anonymous_function ||\n                    last_type === 'TK_EQUALS' ||\n                    (last_type === 'TK_RESERVED' && is_special_word(flags.last_text) && flags.last_text !== 'else'))) {\n                output.space_before_token = true;\n            } else {\n                print_newline(false, true);\n            }\n        } else { // collapse\n            if (last_type !== 'TK_OPERATOR' && last_type !== 'TK_START_EXPR') {\n                if (last_type === 'TK_START_BLOCK') {\n                    print_newline();\n                } else {\n                    output.space_before_token = true;\n                }\n            } else {\n                // if TK_OPERATOR or TK_START_EXPR\n                if (is_array(previous_flags.mode) && flags.last_text === ',') {\n                    if (last_last_text === '}') {\n                        // }, { in array context\n                        output.space_before_token = true;\n                    } else {\n                        print_newline(); // [a, b, c, {\n                    }\n                }\n            }\n        }\n        print_token();\n        indent();\n    }\n\n    function handle_end_block() {\n        // statements must all be closed when their container closes\n        while (flags.mode === MODE.Statement) {\n            restore_mode();\n        }\n        var empty_braces = last_type === 'TK_START_BLOCK';\n\n        if (opt.brace_style === \"expand\") {\n            if (!empty_braces) {\n                print_newline();\n            }\n        } else {\n            // skip {}\n            if (!empty_braces) {\n                if (is_array(flags.mode) && opt.keep_array_indentation) {\n                    // we REALLY need a newline here, but newliner would skip that\n                    opt.keep_array_indentation = false;\n                    print_newline();\n                    opt.keep_array_indentation = true;\n\n                } else {\n                    print_newline();\n                }\n            }\n        }\n        restore_mode();\n        print_token();\n    }\n\n    function handle_word() {\n        if (current_token.type === 'TK_RESERVED' && flags.mode !== MODE.ObjectLiteral &&\n            in_array(current_token.text, ['set', 'get'])) {\n            current_token.type = 'TK_WORD';\n        }\n\n        if (current_token.type === 'TK_RESERVED' && flags.mode === MODE.ObjectLiteral) {\n            var next_token = get_token(1);\n            if (next_token.text == ':') {\n                current_token.type = 'TK_WORD';\n            }\n        }\n\n        if (start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n        } else if (current_token.wanted_newline && !is_expression(flags.mode) &&\n            (last_type !== 'TK_OPERATOR' || (flags.last_text === '--' || flags.last_text === '++')) &&\n            last_type !== 'TK_EQUALS' &&\n            (opt.preserve_newlines || !(last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {\n\n            print_newline();\n        }\n\n        if (flags.do_block && !flags.do_while) {\n            if (current_token.type === 'TK_RESERVED' && current_token.text === 'while') {\n                // do {} ## while ()\n                output.space_before_token = true;\n                print_token();\n                output.space_before_token = true;\n                flags.do_while = true;\n                return;\n            } else {\n                // do {} should always have while as the next word.\n                // if we don't see the expected while, recover\n                print_newline();\n                flags.do_block = false;\n            }\n        }\n\n        // if may be followed by else, or not\n        // Bare/inline ifs are tricky\n        // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();\n        if (flags.if_block) {\n            if (!flags.else_block && (current_token.type === 'TK_RESERVED' && current_token.text === 'else')) {\n                flags.else_block = true;\n            } else {\n                while (flags.mode === MODE.Statement) {\n                    restore_mode();\n                }\n                flags.if_block = false;\n                flags.else_block = false;\n            }\n        }\n\n        if (current_token.type === 'TK_RESERVED' && (current_token.text === 'case' || (current_token.text === 'default' && flags.in_case_statement))) {\n            print_newline();\n            if (flags.case_body || opt.jslint_happy) {\n                // switch cases following one another\n                deindent();\n                flags.case_body = false;\n            }\n            print_token();\n            flags.in_case = true;\n            flags.in_case_statement = true;\n            return;\n        }\n\n        if (current_token.type === 'TK_RESERVED' && current_token.text === 'function') {\n            if (in_array(flags.last_text, ['}', ';']) || (output.just_added_newline() && ! in_array(flags.last_text, ['[', '{', ':', '=', ',']))) {\n                // make sure there is a nice clean space of at least one blank line\n                // before a new function definition\n                if ( !output.just_added_blankline() && !current_token.comments_before.length) {\n                    print_newline();\n                    print_newline(true);\n                }\n            }\n            if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {\n                if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set', 'new', 'return', 'export', 'async'])) {\n                    output.space_before_token = true;\n                } else if (last_type === 'TK_RESERVED' && flags.last_text === 'default' && last_last_text === 'export') {\n                    output.space_before_token = true;\n                } else {\n                    print_newline();\n                }\n            } else if (last_type === 'TK_OPERATOR' || flags.last_text === '=') {\n                // foo = function\n                output.space_before_token = true;\n            } else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {\n                // (function\n            } else {\n                print_newline();\n            }\n        }\n\n        if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n            if (!start_of_object_property()) {\n                allow_wrap_or_preserved_newline();\n            }\n        }\n\n        if (current_token.type === 'TK_RESERVED' &&  in_array(current_token.text, ['function', 'get', 'set'])) {\n            print_token();\n            flags.last_word = current_token.text;\n            return;\n        }\n\n        prefix = 'NONE';\n\n        if (last_type === 'TK_END_BLOCK') {\n            if (!(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally']))) {\n                prefix = 'NEWLINE';\n            } else {\n                if (opt.brace_style === \"expand\" ||\n                    opt.brace_style === \"end-expand\" ||\n                    (opt.brace_style === \"none\" && current_token.wanted_newline)) {\n                    prefix = 'NEWLINE';\n                } else {\n                    prefix = 'SPACE';\n                    output.space_before_token = true;\n                }\n            }\n        } else if (last_type === 'TK_SEMICOLON' && flags.mode === MODE.BlockStatement) {\n            // TODO: Should this be for STATEMENT as well?\n            prefix = 'NEWLINE';\n        } else if (last_type === 'TK_SEMICOLON' && is_expression(flags.mode)) {\n            prefix = 'SPACE';\n        } else if (last_type === 'TK_STRING') {\n            prefix = 'NEWLINE';\n        } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' ||\n            (flags.last_text === '*' && last_last_text === 'function')) {\n            prefix = 'SPACE';\n        } else if (last_type === 'TK_START_BLOCK') {\n            prefix = 'NEWLINE';\n        } else if (last_type === 'TK_END_EXPR') {\n            output.space_before_token = true;\n            prefix = 'NEWLINE';\n        }\n\n        if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {\n            if (flags.last_text === 'else' || flags.last_text === 'export') {\n                prefix = 'SPACE';\n            } else {\n                prefix = 'NEWLINE';\n            }\n\n        }\n\n        if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally'])) {\n            if (last_type !== 'TK_END_BLOCK' ||\n                opt.brace_style === \"expand\" ||\n                opt.brace_style === \"end-expand\" ||\n                (opt.brace_style === \"none\" && current_token.wanted_newline)) {\n                print_newline();\n            } else {\n                output.trim(true);\n                var line = output.current_line;\n                // If we trimmed and there's something other than a close block before us\n                // put a newline back in.  Handles '} // comment' scenario.\n                if (line.last() !== '}') {\n                    print_newline();\n                }\n                output.space_before_token = true;\n            }\n        } else if (prefix === 'NEWLINE') {\n            if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n                // no newline between 'return nnn'\n                output.space_before_token = true;\n            } else if (last_type !== 'TK_END_EXPR') {\n                if ((last_type !== 'TK_START_EXPR' || !(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['var', 'let', 'const']))) && flags.last_text !== ':') {\n                    // no need to force newline on 'var': for (var x = 0...)\n                    if (current_token.type === 'TK_RESERVED' && current_token.text === 'if' && flags.last_text === 'else') {\n                        // no newline for } else if {\n                        output.space_before_token = true;\n                    } else {\n                        print_newline();\n                    }\n                }\n            } else if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {\n                print_newline();\n            }\n        } else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === ',' && last_last_text === '}') {\n            print_newline(); // }, in lists get a newline treatment\n        } else if (prefix === 'SPACE') {\n            output.space_before_token = true;\n        }\n        print_token();\n        flags.last_word = current_token.text;\n\n        if (current_token.type === 'TK_RESERVED' && current_token.text === 'do') {\n            flags.do_block = true;\n        }\n\n        if (current_token.type === 'TK_RESERVED' && current_token.text === 'if') {\n            flags.if_block = true;\n        }\n    }\n\n    function handle_semicolon() {\n        if (start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n            // Semicolon can be the start (and end) of a statement\n            output.space_before_token = false;\n        }\n        while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {\n            restore_mode();\n        }\n        print_token();\n    }\n\n    function handle_string() {\n        if (start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n            // One difference - strings want at least a space before\n            output.space_before_token = true;\n        } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {\n            output.space_before_token = true;\n        } else if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n            if (!start_of_object_property()) {\n                allow_wrap_or_preserved_newline();\n            }\n        } else {\n            print_newline();\n        }\n        print_token();\n    }\n\n    function handle_equals() {\n        if (start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n        }\n\n        if (flags.declaration_statement) {\n            // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done\n            flags.declaration_assignment = true;\n        }\n        output.space_before_token = true;\n        print_token();\n        output.space_before_token = true;\n    }\n\n    function handle_comma() {\n        if (flags.declaration_statement) {\n            if (is_expression(flags.parent.mode)) {\n                // do not break on comma, for(var a = 1, b = 2)\n                flags.declaration_assignment = false;\n            }\n\n            print_token();\n\n            if (flags.declaration_assignment) {\n                flags.declaration_assignment = false;\n                print_newline(false, true);\n            } else {\n                output.space_before_token = true;\n                // for comma-first, we want to allow a newline before the comma\n                // to turn into a newline after the comma, which we will fixup later\n                if (opt.comma_first) {\n                    allow_wrap_or_preserved_newline();\n                }\n            }\n            return;\n        }\n\n        print_token();\n        if (flags.mode === MODE.ObjectLiteral ||\n            (flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {\n            if (flags.mode === MODE.Statement) {\n                restore_mode();\n            }\n            print_newline();\n        } else {\n            // EXPR or DO_BLOCK\n            output.space_before_token = true;\n            // for comma-first, we want to allow a newline before the comma\n            // to turn into a newline after the comma, which we will fixup later\n            if (opt.comma_first) {\n                allow_wrap_or_preserved_newline();\n            }\n        }\n\n    }\n\n    function handle_operator() {\n        if (start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n        }\n\n        if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n            // \"return\" had a special handling in TK_WORD. Now we need to return the favor\n            output.space_before_token = true;\n            print_token();\n            return;\n        }\n\n        // hack for actionscript's import .*;\n        if (current_token.text === '*' && last_type === 'TK_DOT') {\n            print_token();\n            return;\n        }\n\n        if (current_token.text === ':' && flags.in_case) {\n            flags.case_body = true;\n            indent();\n            print_token();\n            print_newline();\n            flags.in_case = false;\n            return;\n        }\n\n        if (current_token.text === '::') {\n            // no spaces around exotic namespacing syntax operator\n            print_token();\n            return;\n        }\n\n        // Allow line wrapping between operators\n        if (last_type === 'TK_OPERATOR') {\n            allow_wrap_or_preserved_newline();\n        }\n\n        var space_before = true;\n        var space_after = true;\n\n        if (in_array(current_token.text, ['--', '++', '!', '~']) || (in_array(current_token.text, ['-', '+']) && (in_array(last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) || in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === ','))) {\n            // unary operators (and binary +/- pretending to be unary) special cases\n\n            space_before = false;\n            space_after = false;\n\n            // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1\n            // if there is a newline between -- or ++ and anything else we should preserve it.\n            if (current_token.wanted_newline && (current_token.text === '--' || current_token.text === '++')) {\n                print_newline(false, true);\n            }\n\n            if (flags.last_text === ';' && is_expression(flags.mode)) {\n                // for (;; ++i)\n                //        ^^^\n                space_before = true;\n            }\n\n            if (last_type === 'TK_RESERVED') {\n                space_before = true;\n            } else if (last_type === 'TK_END_EXPR') {\n                space_before = !(flags.last_text === ']' && (current_token.text === '--' || current_token.text === '++'));\n            } else if (last_type === 'TK_OPERATOR') {\n                // a++ + ++b;\n                // a - -b\n                space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(flags.last_text, ['--', '-', '++', '+']);\n                // + and - are not unary when preceeded by -- or ++ operator\n                // a-- + b\n                // a * +b\n                // a - -b\n                if (in_array(current_token.text, ['+', '-']) && in_array(flags.last_text, ['--', '++'])) {\n                    space_after = true;\n                }\n            }\n\n            if ((flags.mode === MODE.BlockStatement || flags.mode === MODE.Statement) && (flags.last_text === '{' || flags.last_text === ';')) {\n                // { foo; --i }\n                // foo(); --bar;\n                print_newline();\n            }\n        } else if (current_token.text === ':') {\n            if (flags.ternary_depth === 0) {\n                // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.\n                space_before = false;\n            } else {\n                flags.ternary_depth -= 1;\n            }\n        } else if (current_token.text === '?') {\n            flags.ternary_depth += 1;\n        } else if (current_token.text === '*' && last_type === 'TK_RESERVED' && flags.last_text === 'function') {\n            space_before = false;\n            space_after = false;\n        }\n        output.space_before_token = output.space_before_token || space_before;\n        print_token();\n        output.space_before_token = space_after;\n    }\n\n    function handle_block_comment() {\n        if (output.raw) {\n            output.add_raw_token(current_token)\n            if (current_token.directives && current_token.directives['preserve'] === 'end') {\n                // If we're testing the raw output behavior, do not allow a directive to turn it off.\n                if (!opt.test_output_raw) {\n                    output.raw = false;\n                }\n            }\n            return;\n        }\n\n        if (current_token.directives) {\n            print_newline(false, true);\n            print_token();\n            if (current_token.directives['preserve'] === 'start') {\n                output.raw = true;\n            }\n            print_newline(false, true);\n            return;\n        }\n\n        // inline block\n        if (!acorn.newline.test(current_token.text) && !current_token.wanted_newline) {\n            output.space_before_token = true;\n            print_token();\n            output.space_before_token = true;\n            return;\n        }\n\n        var lines = split_newlines(current_token.text);\n        var j; // iterator for this case\n        var javadoc = false;\n        var starless = false;\n        var lastIndent = current_token.whitespace_before;\n        var lastIndentLength = lastIndent.length;\n\n        // block comment starts with a new line\n        print_newline(false, true);\n        if (lines.length > 1) {\n            if (all_lines_start_with(lines.slice(1), '*')) {\n                javadoc = true;\n            }\n            else if (each_line_matches_indent(lines.slice(1), lastIndent)) {\n                starless = true;\n            }\n        }\n\n        // first line always indented\n        print_token(lines[0]);\n        for (j = 1; j < lines.length; j++) {\n            print_newline(false, true);\n            if (javadoc) {\n                // javadoc: reformat and re-indent\n                print_token(' ' + ltrim(lines[j]));\n            } else if (starless && lines[j].length > lastIndentLength) {\n                // starless: re-indent non-empty content, avoiding trim\n                print_token(lines[j].substring(lastIndentLength));\n            } else {\n                // normal comments output raw\n                output.add_token(lines[j]);\n            }\n        }\n\n        // for comments of more than one line, make sure there's a new line after\n        print_newline(false, true);\n    }\n\n    function handle_comment() {\n        if (current_token.wanted_newline) {\n            print_newline(false, true);\n        } else {\n            output.trim(true);\n        }\n\n        output.space_before_token = true;\n        print_token();\n        print_newline(false, true);\n    }\n\n    function handle_dot() {\n        if (start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n        }\n\n        if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n            output.space_before_token = true;\n        } else {\n            // allow preserved newlines before dots in general\n            // force newlines on dots after close paren when break_chained - for bar().baz()\n            allow_wrap_or_preserved_newline(flags.last_text === ')' && opt.break_chained_methods);\n        }\n\n        print_token();\n    }\n\n    function handle_unknown() {\n        print_token();\n\n        if (current_token.text[current_token.text.length - 1] === '\\n') {\n            print_newline();\n        }\n    }\n\n    function handle_eof() {\n        // Unwind any open statements\n        while (flags.mode === MODE.Statement) {\n            restore_mode();\n        }\n    }\n}\n\n\nfunction OutputLine(parent) {\n    var _character_count = 0;\n    // use indent_count as a marker for lines that have preserved indentation\n    var _indent_count = -1;\n\n    var _items = [];\n    var _empty = true;\n\n    this.set_indent = function(level) {\n        _character_count = parent.baseIndentLength + level * parent.indent_length\n        _indent_count = level;\n    }\n\n    this.get_character_count = function() {\n        return _character_count;\n    }\n\n    this.is_empty = function() {\n        return _empty;\n    }\n\n    this.last = function() {\n        if (!this._empty) {\n          return _items[_items.length - 1];\n        } else {\n          return null;\n        }\n    }\n\n    this.push = function(input) {\n        _items.push(input);\n        _character_count += input.length;\n        _empty = false;\n    }\n\n    this.pop = function() {\n        var item = null;\n        if (!_empty) {\n            item = _items.pop();\n            _character_count -= item.length;\n            _empty = _items.length === 0;\n        }\n        return item;\n    }\n\n    this.remove_indent = function() {\n        if (_indent_count > 0) {\n            _indent_count -= 1;\n            _character_count -= parent.indent_length\n        }\n    }\n\n    this.trim = function() {\n        while (this.last() === ' ') {\n            var item = _items.pop();\n            _character_count -= 1;\n        }\n        _empty = _items.length === 0;\n    }\n\n    this.toString = function() {\n        var result = '';\n        if (!this._empty) {\n            if (_indent_count >= 0) {\n                result = parent.indent_cache[_indent_count];\n            }\n            result += _items.join('')\n        }\n        return result;\n    }\n}\n\nfunction Output(indent_string, baseIndentString) {\n    baseIndentString = baseIndentString || '';\n    this.indent_cache = [ baseIndentString ];\n    this.baseIndentLength = baseIndentString.length;\n    this.indent_length = indent_string.length;\n    this.raw = false;\n\n    var lines =[];\n    this.baseIndentString = baseIndentString;\n    this.indent_string = indent_string;\n    this.previous_line = null;\n    this.current_line = null;\n    this.space_before_token = false;\n\n    this.add_outputline = function() {\n        this.previous_line = this.current_line;\n        this.current_line = new OutputLine(this);\n        lines.push(this.current_line);\n    }\n\n    // initialize\n    this.add_outputline();\n\n\n    this.get_line_number = function() {\n        return lines.length;\n    }\n\n    // Using object instead of string to allow for later expansion of info about each line\n    this.add_new_line = function(force_newline) {\n        if (this.get_line_number() === 1 && this.just_added_newline()) {\n            return false; // no newline on start of file\n        }\n\n        if (force_newline || !this.just_added_newline()) {\n            if (!this.raw) {\n                this.add_outputline();\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    this.get_code = function() {\n        var sweet_code = lines.join('\\n').replace(/[\\r\\n\\t ]+$/, '');\n        return sweet_code;\n    }\n\n    this.set_indent = function(level) {\n        // Never indent your first output indent at the start of the file\n        if (lines.length > 1) {\n            while(level >= this.indent_cache.length) {\n                this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);\n            }\n\n            this.current_line.set_indent(level);\n            return true;\n        }\n        this.current_line.set_indent(0);\n        return false;\n    }\n\n    this.add_raw_token = function(token) {\n        for (var x = 0; x < token.newlines; x++) {\n            this.add_outputline();\n        }\n        this.current_line.push(token.whitespace_before);\n        this.current_line.push(token.text);\n        this.space_before_token = false;\n    }\n\n    this.add_token = function(printable_token) {\n        this.add_space_before_token();\n        this.current_line.push(printable_token);\n    }\n\n    this.add_space_before_token = function() {\n        if (this.space_before_token && !this.just_added_newline()) {\n            this.current_line.push(' ');\n        }\n        this.space_before_token = false;\n    }\n\n    this.remove_redundant_indentation = function (frame) {\n        // This implementation is effective but has some issues:\n        //     - can cause line wrap to happen too soon due to indent removal\n        //           after wrap points are calculated\n        // These issues are minor compared to ugly indentation.\n\n        if (frame.multiline_frame ||\n            frame.mode === MODE.ForInitializer ||\n            frame.mode === MODE.Conditional) {\n            return;\n        }\n\n        // remove one indent from each line inside this section\n        var index = frame.start_line_index;\n        var line;\n\n        var output_length = lines.length;\n        while (index < output_length) {\n            lines[index].remove_indent();\n            index++;\n        }\n    }\n\n    this.trim = function(eat_newlines) {\n        eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;\n\n        this.current_line.trim(indent_string, baseIndentString);\n\n        while (eat_newlines && lines.length > 1 &&\n            this.current_line.is_empty()) {\n            lines.pop();\n            this.current_line = lines[lines.length - 1]\n            this.current_line.trim();\n        }\n\n        this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null;\n    }\n\n    this.just_added_newline = function() {\n        return this.current_line.is_empty();\n    }\n\n    this.just_added_blankline = function() {\n        if (this.just_added_newline()) {\n            if (lines.length === 1) {\n                return true; // start of the file and newline = blank\n            }\n\n            var line = lines[lines.length - 2];\n            return line.is_empty();\n        }\n        return false;\n    }\n}\n\n\nvar Token = function(type, text, newlines, whitespace_before, mode, parent) {\n    this.type = type;\n    this.text = text;\n    this.comments_before = [];\n    this.newlines = newlines || 0;\n    this.wanted_newline = newlines > 0;\n    this.whitespace_before = whitespace_before || '';\n    this.parent = null;\n    this.directives = null;\n}\n\nfunction tokenizer(input, opts, indent_string) {\n\n    var whitespace = \"\\n\\r\\t \".split('');\n    var digit = /[0-9]/;\n    var digit_hex = /[0123456789abcdefABCDEF]/;\n\n    var punct = ('+ - * / % & ++ -- = += -= *= /= %= == === != !== > < >= <= >> << >>> >>>= >>= <<= && &= | || ! ~ , : ? ^ ^= |= :: =>').split(' '); \n    // words which should always start on new line.\n    this.line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');\n    var reserved_words = this.line_starters.concat(['do', 'in', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await']);\n\n    //  /* ... */ comment ends with nearest */ or end of file\n    var block_comment_pattern = /([\\s\\S]*?)((?:\\*\\/)|$)/g;\n\n    // comment ends just before nearest linefeed or end of file\n    var comment_pattern = /([^\\n\\r\\u2028\\u2029]*)/g;\n\n    var directives_block_pattern = /\\/\\* beautify( \\w+[:]\\w+)+ \\*\\//g;\n    var directive_pattern = / (\\w+)[:](\\w+)/g;\n    var directives_end_ignore_pattern = /([\\s\\S]*?)((?:\\/\\*\\sbeautify\\signore:end\\s\\*\\/)|$)/g;\n\n    var template_pattern = /((<\\?php|<\\?=)[\\s\\S]*?\\?>)|(<%[\\s\\S]*?%>)/g\n\n    var n_newlines, whitespace_before_token, in_html_comment, tokens, parser_pos;\n    var input_length;\n\n    this.tokenize = function() {\n        // cache the source's length.\n        input_length = input.length\n        parser_pos = 0;\n        in_html_comment = false\n        tokens = [];\n\n        var next, last;\n        var token_values;\n        var open = null;\n        var open_stack = [];\n        var comments = [];\n\n        while (!(last && last.type === 'TK_EOF')) {\n            token_values = tokenize_next();\n            next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);\n            while(next.type === 'TK_COMMENT' || next.type === 'TK_BLOCK_COMMENT' || next.type === 'TK_UNKNOWN') {\n                if (next.type === 'TK_BLOCK_COMMENT') {\n                    next.directives = token_values[2];\n                }\n                comments.push(next);\n                token_values = tokenize_next();\n                next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);\n            }\n\n            if (comments.length) {\n                next.comments_before = comments;\n                comments = [];\n            }\n\n            if (next.type === 'TK_START_BLOCK' || next.type === 'TK_START_EXPR') {\n                next.parent = last;\n                open_stack.push(open);\n                open = next;\n            }  else if ((next.type === 'TK_END_BLOCK' || next.type === 'TK_END_EXPR') &&\n                (open && (\n                    (next.text === ']' && open.text === '[') ||\n                    (next.text === ')' && open.text === '(') ||\n                    (next.text === '}' && open.text === '{')))) {\n                next.parent = open.parent;\n                open = open_stack.pop();\n            }\n\n            tokens.push(next);\n            last = next;\n        }\n\n        return tokens;\n    }\n\n    function get_directives (text) {\n        if (!text.match(directives_block_pattern)) {\n            return null;\n        }\n\n        var directives = {};\n        directive_pattern.lastIndex = 0;\n        var directive_match = directive_pattern.exec(text);\n\n        while (directive_match) {\n            directives[directive_match[1]] = directive_match[2];\n            directive_match = directive_pattern.exec(text);\n        }\n\n        return directives;\n    }\n\n    function tokenize_next() {\n        var i, resulting_string;\n        var whitespace_on_this_line = [];\n\n        n_newlines = 0;\n        whitespace_before_token = '';\n\n        if (parser_pos >= input_length) {\n            return ['', 'TK_EOF'];\n        }\n\n        var last_token;\n        if (tokens.length) {\n            last_token = tokens[tokens.length-1];\n        } else {\n            // For the sake of tokenizing we can pretend that there was on open brace to start\n            last_token = new Token('TK_START_BLOCK', '{');\n        }\n\n\n        var c = input.charAt(parser_pos);\n        parser_pos += 1;\n\n        while (in_array(c, whitespace)) {\n\n            if (acorn.newline.test(c)) {\n                if (!(c === '\\n' && input.charAt(parser_pos-2) === '\\r')) {\n                    n_newlines += 1;\n                    whitespace_on_this_line = [];\n                }\n            } else {\n                whitespace_on_this_line.push(c);\n            }\n\n            if (parser_pos >= input_length) {\n                return ['', 'TK_EOF'];\n            }\n\n            c = input.charAt(parser_pos);\n            parser_pos += 1;\n        }\n\n        if(whitespace_on_this_line.length) {\n            whitespace_before_token = whitespace_on_this_line.join('');\n        }\n\n        if (digit.test(c)) {\n            var allow_decimal = true;\n            var allow_e = true;\n            var local_digit = digit;\n\n            if (c === '0' && parser_pos < input_length && /[Xx]/.test(input.charAt(parser_pos))) {\n                // switch to hex number, no decimal or e, just hex digits\n                allow_decimal = false;\n                allow_e = false;\n                c += input.charAt(parser_pos);\n                parser_pos += 1;\n                local_digit = digit_hex\n            } else {\n                // we know this first loop will run.  It keeps the logic simpler.\n                c = '';\n                parser_pos -= 1\n            }\n\n            // Add the digits\n            while (parser_pos < input_length && local_digit.test(input.charAt(parser_pos))) {\n                c += input.charAt(parser_pos);\n                parser_pos += 1;\n\n                if (allow_decimal && parser_pos < input_length && input.charAt(parser_pos) === '.') {\n                    c += input.charAt(parser_pos);\n                    parser_pos += 1;\n                    allow_decimal = false;\n                }\n\n                if (allow_e && parser_pos < input_length && /[Ee]/.test(input.charAt(parser_pos))) {\n                    c += input.charAt(parser_pos);\n                    parser_pos += 1;\n\n                    if (parser_pos < input_length && /[+-]/.test(input.charAt(parser_pos))) {\n                        c += input.charAt(parser_pos);\n                        parser_pos += 1;\n                    }\n\n                    allow_e = false;\n                    allow_decimal = false;\n                }\n            }\n\n            return [c, 'TK_WORD'];\n        }\n\n        if (acorn.isIdentifierStart(input.charCodeAt(parser_pos-1))) {\n            if (parser_pos < input_length) {\n                while (acorn.isIdentifierChar(input.charCodeAt(parser_pos))) {\n                    c += input.charAt(parser_pos);\n                    parser_pos += 1;\n                    if (parser_pos === input_length) {\n                        break;\n                    }\n                }\n            }\n\n            if (!(last_token.type === 'TK_DOT' ||\n                    (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['set', 'get'])))\n                && in_array(c, reserved_words)) {\n                if (c === 'in') { // hack for 'in' operator\n                    return [c, 'TK_OPERATOR'];\n                }\n                return [c, 'TK_RESERVED'];\n            }\n\n            return [c, 'TK_WORD'];\n        }\n\n        if (c === '(' || c === '[') {\n            return [c, 'TK_START_EXPR'];\n        }\n\n        if (c === ')' || c === ']') {\n            return [c, 'TK_END_EXPR'];\n        }\n\n        if (c === '{') {\n            return [c, 'TK_START_BLOCK'];\n        }\n\n        if (c === '}') {\n            return [c, 'TK_END_BLOCK'];\n        }\n\n        if (c === ';') {\n            return [c, 'TK_SEMICOLON'];\n        }\n\n        if (c === '/') {\n            var comment = '';\n            // peek for comment /* ... */\n            if (input.charAt(parser_pos) === '*') {\n                parser_pos += 1;\n                block_comment_pattern.lastIndex = parser_pos;\n                var comment_match = block_comment_pattern.exec(input);\n                comment = '/*' + comment_match[0];\n                parser_pos += comment_match[0].length;\n                var directives = get_directives(comment);\n                if (directives && directives['ignore'] === 'start') {\n                    directives_end_ignore_pattern.lastIndex = parser_pos;\n                    comment_match = directives_end_ignore_pattern.exec(input)\n                    comment += comment_match[0];\n                    parser_pos += comment_match[0].length;\n                }\n                comment = comment.replace(acorn.lineBreak, '\\n');\n                return [comment, 'TK_BLOCK_COMMENT', directives];\n            }\n            // peek for comment // ...\n            if (input.charAt(parser_pos) === '/') {\n                parser_pos += 1;\n                comment_pattern.lastIndex = parser_pos;\n                var comment_match = comment_pattern.exec(input);\n                comment = '//' + comment_match[0];\n                parser_pos += comment_match[0].length;\n                return [comment, 'TK_COMMENT'];\n            }\n\n        }\n\n        if (c === '`' || c === \"'\" || c === '\"' || // string\n            (\n                (c === '/') || // regexp\n                (opts.e4x && c === \"<\" && input.slice(parser_pos - 1).match(/^<([-a-zA-Z:0-9_.]+|{[^{}]*}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{.*?}))*\\s*(\\/?)\\s*>/)) // xml\n            ) && ( // regex and xml can only appear in specific locations during parsing\n                (last_token.type === 'TK_RESERVED' && in_array(last_token.text , ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||\n                (last_token.type === 'TK_END_EXPR' && last_token.text === ')' &&\n                    last_token.parent && last_token.parent.type === 'TK_RESERVED' && in_array(last_token.parent.text, ['if', 'while', 'for'])) ||\n                (in_array(last_token.type, ['TK_COMMENT', 'TK_START_EXPR', 'TK_START_BLOCK',\n                    'TK_END_BLOCK', 'TK_OPERATOR', 'TK_EQUALS', 'TK_EOF', 'TK_SEMICOLON', 'TK_COMMA'\n                ]))\n            )) {\n\n            var sep = c,\n                esc = false,\n                has_char_escapes = false;\n\n            resulting_string = c;\n\n            if (sep === '/') {\n                //\n                // handle regexp\n                //\n                var in_char_class = false;\n                while (parser_pos < input_length &&\n                        ((esc || in_char_class || input.charAt(parser_pos) !== sep) &&\n                        !acorn.newline.test(input.charAt(parser_pos)))) {\n                    resulting_string += input.charAt(parser_pos);\n                    if (!esc) {\n                        esc = input.charAt(parser_pos) === '\\\\';\n                        if (input.charAt(parser_pos) === '[') {\n                            in_char_class = true;\n                        } else if (input.charAt(parser_pos) === ']') {\n                            in_char_class = false;\n                        }\n                    } else {\n                        esc = false;\n                    }\n                    parser_pos += 1;\n                }\n            } else if (opts.e4x && sep === '<') {\n                //\n                // handle e4x xml literals\n                //\n                var xmlRegExp = /<(\\/?)([-a-zA-Z:0-9_.]+|{[^{}]*}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{.*?}))*\\s*(\\/?)\\s*>/g;\n                var xmlStr = input.slice(parser_pos - 1);\n                var match = xmlRegExp.exec(xmlStr);\n                if (match && match.index === 0) {\n                    var rootTag = match[2];\n                    var depth = 0;\n                    while (match) {\n                        var isEndTag = !! match[1];\n                        var tagName = match[2];\n                        var isSingletonTag = ( !! match[match.length - 1]) || (tagName.slice(0, 8) === \"![CDATA[\");\n                        if (tagName === rootTag && !isSingletonTag) {\n                            if (isEndTag) {\n                                --depth;\n                            } else {\n                                ++depth;\n                            }\n                        }\n                        if (depth <= 0) {\n                            break;\n                        }\n                        match = xmlRegExp.exec(xmlStr);\n                    }\n                    var xmlLength = match ? match.index + match[0].length : xmlStr.length;\n                    xmlStr = xmlStr.slice(0, xmlLength);\n                    parser_pos += xmlLength - 1;\n                    xmlStr = xmlStr.replace(acorn.lineBreak, '\\n');\n                    return [xmlStr, \"TK_STRING\"];\n                }\n            } else {\n                //\n                // handle string\n                //\n                // Template strings can travers lines without escape characters.\n                // Other strings cannot\n                while (parser_pos < input_length &&\n                        (esc || (input.charAt(parser_pos) !== sep &&\n                        (sep === '`' || !acorn.newline.test(input.charAt(parser_pos)))))) {\n                    // Handle \\r\\n linebreaks after escapes or in template strings\n                    if ((esc || sep === '`') && acorn.newline.test(input.charAt(parser_pos))) {\n                        if (input.charAt(parser_pos) === '\\r' && input.charAt(parser_pos + 1) === '\\n') {\n                            parser_pos += 1;\n                        }\n                        resulting_string += '\\n';\n                    } else {\n                        resulting_string += input.charAt(parser_pos);\n                    }\n                    if (esc) {\n                        if (input.charAt(parser_pos) === 'x' || input.charAt(parser_pos) === 'u') {\n                            has_char_escapes = true;\n                        }\n                        esc = false;\n                    } else {\n                        esc = input.charAt(parser_pos) === '\\\\';\n                    }\n                    parser_pos += 1;\n                }\n\n            }\n\n            if (has_char_escapes && opts.unescape_strings) {\n                resulting_string = unescape_string(resulting_string);\n            }\n\n            if (parser_pos < input_length && input.charAt(parser_pos) === sep) {\n                resulting_string += sep;\n                parser_pos += 1;\n\n                if (sep === '/') {\n                    // regexps may have modifiers /regexp/MOD , so fetch those, too\n                    // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.\n                    while (parser_pos < input_length && acorn.isIdentifierStart(input.charCodeAt(parser_pos))) {\n                        resulting_string += input.charAt(parser_pos);\n                        parser_pos += 1;\n                    }\n                }\n            }\n            return [resulting_string, 'TK_STRING'];\n        }\n\n        if (c === '#') {\n\n            if (tokens.length === 0 && input.charAt(parser_pos) === '!') {\n                // shebang\n                resulting_string = c;\n                while (parser_pos < input_length && c !== '\\n') {\n                    c = input.charAt(parser_pos);\n                    resulting_string += c;\n                    parser_pos += 1;\n                }\n                return [trim(resulting_string) + '\\n', 'TK_UNKNOWN'];\n            }\n\n\n\n            // Spidermonkey-specific sharp variables for circular references\n            // https://developer.mozilla.org/En/Sharp_variables_in_JavaScript\n            // http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935\n            var sharp = '#';\n            if (parser_pos < input_length && digit.test(input.charAt(parser_pos))) {\n                do {\n                    c = input.charAt(parser_pos);\n                    sharp += c;\n                    parser_pos += 1;\n                } while (parser_pos < input_length && c !== '#' && c !== '=');\n                if (c === '#') {\n                    //\n                } else if (input.charAt(parser_pos) === '[' && input.charAt(parser_pos + 1) === ']') {\n                    sharp += '[]';\n                    parser_pos += 2;\n                } else if (input.charAt(parser_pos) === '{' && input.charAt(parser_pos + 1) === '}') {\n                    sharp += '{}';\n                    parser_pos += 2;\n                }\n                return [sharp, 'TK_WORD'];\n            }\n        }\n\n        if (c === '<' && (input.charAt(parser_pos) === '?' || input.charAt(parser_pos) === '%')) {\n            template_pattern.lastIndex = parser_pos - 1;\n            var template_match = template_pattern.exec(input);\n            if(template_match) {\n                c = template_match[0];\n                parser_pos += c.length - 1;\n                c = c.replace(acorn.lineBreak, '\\n');\n                return [c, 'TK_STRING'];\n            }\n        }\n\n        if (c === '<' && input.substring(parser_pos - 1, parser_pos + 3) === '<!--') {\n            parser_pos += 3;\n            c = '<!--';\n            while (!acorn.newline.test(input.charAt(parser_pos)) && parser_pos < input_length) {\n                c += input.charAt(parser_pos);\n                parser_pos++;\n            }\n            in_html_comment = true;\n            return [c, 'TK_COMMENT'];\n        }\n\n        if (c === '-' && in_html_comment && input.substring(parser_pos - 1, parser_pos + 2) === '-->') {\n            in_html_comment = false;\n            parser_pos += 2;\n            return ['-->', 'TK_COMMENT'];\n        }\n\n        if (c === '.') {\n            return [c, 'TK_DOT'];\n        }\n\n        if (in_array(c, punct)) {\n            while (parser_pos < input_length && in_array(c + input.charAt(parser_pos), punct)) {\n                c += input.charAt(parser_pos);\n                parser_pos += 1;\n                if (parser_pos >= input_length) {\n                    break;\n                }\n            }\n\n            if (c === ',') {\n                return [c, 'TK_COMMA'];\n            } else if (c === '=') {\n                return [c, 'TK_EQUALS'];\n            } else {\n                return [c, 'TK_OPERATOR'];\n            }\n        }\n\n        return [c, 'TK_UNKNOWN'];\n    }\n\n\n    function unescape_string(s) {\n        var esc = false,\n            out = '',\n            pos = 0,\n            s_hex = '',\n            escaped = 0,\n            c;\n\n        while (esc || pos < s.length) {\n\n            c = s.charAt(pos);\n            pos++;\n\n            if (esc) {\n                esc = false;\n                if (c === 'x') {\n                    // simple hex-escape \\x24\n                    s_hex = s.substr(pos, 2);\n                    pos += 2;\n                } else if (c === 'u') {\n                    // unicode-escape, \\u2134\n                    s_hex = s.substr(pos, 4);\n                    pos += 4;\n                } else {\n                    // some common escape, e.g \\n\n                    out += '\\\\' + c;\n                    continue;\n                }\n                if (!s_hex.match(/^[0123456789abcdefABCDEF]+$/)) {\n                    // some weird escaping, bail out,\n                    // leaving whole string intact\n                    return s;\n                }\n\n                escaped = parseInt(s_hex, 16);\n\n                if (escaped >= 0x00 && escaped < 0x20) {\n                    // leave 0x00...0x1f escaped\n                    if (c === 'x') {\n                        out += '\\\\x' + s_hex;\n                    } else {\n                        out += '\\\\u' + s_hex;\n                    }\n                    continue;\n                } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {\n                    // single-quote, apostrophe, backslash - escape these\n                    out += '\\\\' + String.fromCharCode(escaped);\n                } else if (c === 'x' && escaped > 0x7e && escaped <= 0xff) {\n                    // we bail out on \\x7f..\\xff,\n                    // leaving whole string escaped,\n                    // as it's probably completely binary\n                    return s;\n                } else {\n                    out += String.fromCharCode(escaped);\n                }\n            } else if (c === '\\\\') {\n                esc = true;\n            } else {\n                out += c;\n            }\n        }\n        return out;\n    }\n\n}\n\n\nif (typeof define === \"function\" && define.amd) {\n    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n    define([], function() {\n        return js_beautify;\n    });\n} else if (typeof exports !== \"undefined\") {\n    // Add support for CommonJS. Just put this file somewhere on your require.paths\n    // and you will be able to `var js_beautify = require(\"beautify\").js_beautify`.\n    exports.js_beautify = js_beautify;\n} else if (typeof window !== \"undefined\") {\n    // If we're running a web page and don't have either of the above, add our one global\n    window.js_beautify = js_beautify;\n} else if (typeof global !== \"undefined\") {\n    // If we don't even have window, try global.\n    global.js_beautify = js_beautify;\n}\n\nexport default js_beautify;"],"sourceRoot":""}