/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!******************************!*\
  !*** ./src/inject/inject.js ***!
  \******************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__inject_scss__ = __webpack_require__(/*! ./inject.scss */ 1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__inject_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__inject_scss__);\n\n\nconsole.log(\"content.js loaded\", window == top ? \"@ top\" : \"in frame @\", window.location.href);\nif(window == top) console.log(\"is VF page?\", Boolean(window.document.querySelector('.apexp')));\n\nconst SELECTOR_CSS_PROCESSED = \"css__processed\";\nconst SELECTOR_CSS_DEACTIVATED = \"css__deactivated\";\nconst SELECTOR_CSS_SLDS4VF = \"slds-vf-stylesheet\";\nconst SELECTOR_CSS_LINK = \"html link[rel='stylesheet']\";\nconst SELECTOR_STYLE_TAG = \"style\";\nconst URL_TEMPLATE = \"template/template.html\";\nconst WRAPPER_ID = \"extension-view\";\nconst CATEGORY_CLASSIC = 'salesforce';\nconst CATEGORY_LIGHTNING = 'lex4vf';\nconst CATEGORY_SLDS = 'slds';\n\nlet port;\nlet currentStylesheets = [];\nlet currentStyleTags = [];\n\nconst model = (() => {\n\tconst data = [];\n\tconst getById = id => data.find(link => link.id === id);\n\tconst createElementData = (element, url, filename, category) => ({\n\t\tid: element.id,\n\t\tactivated: !element.classList.contains(SELECTOR_CSS_DEACTIVATED),\n\t\turl,\n\t\tfilename,\n\t\tcategory\n\t});\n\tlet templates;\n\n\treturn {\n\t\tadd: cssLinkData => {\n\t\t\tif(getById(cssLinkData.id)) {\n\t\t\t\tconsole.warn(cssLinkData.id, \"is already processed\", cssLinkData);\n\t\t\t} else {\n\t\t\t\tdata.push(cssLinkData)\n\t\t\t}\n\t\t},\n\t\tcategoryHeaderContent: {\n\t\t\t[CATEGORY_LIGHTNING]: {\n\t\t\t\ttitle: 'Lightning Stylesheets for Visualforce',\n\t\t\t\tdescription: '',\n\t\t\t},\n\t\t\t[CATEGORY_SLDS]: {\n\t\t\t\ttitle: '&lt;apex:slds&gt;',\n\t\t\t\tdescription: 'Lightning Design System styles brought in by usage of &lt;apex:slds&gt;',\n\t\t\t},\n\t\t\t[CATEGORY_CLASSIC]: {\n\t\t\t\ttitle: 'Salesforce styles',\n\t\t\t\tdescription: 'Styles that the platform normally uses in Visualforce pages',\n\t\t\t},\n\t\t\tstyleTag: {\n\t\t\t\ttitle: 'Style tags',\n\t\t\t\tdescription: 'Styles that exist in &lt;style&gt; blocks',\n\t\t\t},\n\t\t\tcustom: {\n\t\t\t\ttitle: 'Custom styles',\n\t\t\t\tdescription: 'Your custom styles or ones that could not be otherwise identified',\t\t\t}\n\t\t},\n\t\tsetActivation: (cssLinkId, value) => {\n\t\t\tconst idx = data.findIndex(element => element.id == cssLinkId);\n\t\t\tdata[idx].activated = value;\n\t\t},\n\t\tgetById: getById,\n\t\tgetCategoryById: id => data.find(element => element.id == id).category,\n\t\tgetCategoryByUrl: url => {\n\t\t\tif(RegExp('lightningstylesheets').test(url)) return CATEGORY_LIGHTNING;\n\t\t  if(RegExp('^\\/apexpages\\/slds\\/|^\\/slds\\/css\\/').test(url)) return CATEGORY_SLDS;\n\t\t  if(RegExp('^\\/sCSS\\/|^\\/faces\\/').test(url)) return CATEGORY_CLASSIC;\n\t\t  return 'custom';\n\t\t},\n\t\tgetCssLinkData: cssLink => {\n\t\t\tconst href = cssLink.getAttribute(\"href\");\n\t\t\treturn createElementData(\n\t\t\t\tcssLink,\n\t\t\t\thref,\n\t\t\t\thref.split(/\\.css|\\.xcss/).shift().split('/').pop(),\n\t\t\t\tmodel.getCategoryByUrl(href)\n\t\t\t)\n\t\t},\n\t\tgetStyleTagData: styleTag => {\n\t\t\treturn createElementData(\n\t\t\t\tstyleTag,\n\t\t\t\tstyleTag.textContent.trim().substring(0, 144),\n\t\t\t\t\"&lt;STYLE tag&gt;\",\n\t\t\t\t\"styleTag\"\n\t\t\t)\n\t\t},\n\t\tisLightningStylesheetsActive: () => Boolean(data.find(link => link.category ===\"lex4vf\" && link.activated === true)),\n\t\tthemePicklistValues: [\n\t\t\t{ category: CATEGORY_LIGHTNING, item_value: \"Lightning Stylesheets\" },\n\t\t\t{ category: CATEGORY_CLASSIC, item_value: \"Classic Stylesheets\" },\n\t\t\t{ category: 'none', item_value: \"No Stylesheets\" }\n\t\t],\n\t\tthemeSelected: CATEGORY_CLASSIC,\n\t\ttoString: () => JSON.stringify(data),\n\t\tget data () { return data },\n\t\tget orgLightningStylesheetsCssPath () { return `/slds/css/${(new Date()).getTime()}/min/lightningstylesheets/one:oneNamespace,force:sldsTokens,force:base,force:oneSalesforceSkin,force:themeTokens,force:formFactorLarge,force:appThemeTokens/slds.css` },\n\t\tget templates () { return templates },\n\t\tset templates(newTemplates) { templates = newTemplates }\n\t}\n})();\n\nconst togglePanel = (force) => document.getElementById(WRAPPER_ID).classList.toggle('is-open', force);\n\nconst getLinks = category => model.data.filter(item => item.category == category);\n\nconst renderTemplate = (snippet, container) => {\n\tconst wrapper = container || document.createElement(\"div\");\n\twrapper.innerHTML = snippet;\n\treturn container ? wrapper : wrapper.firstElementChild;\n}\n\nconst hydrateTemplate = (snippet, data) => {\n\tObject.keys(data).forEach(key => {\n\t\tsnippet = snippet.replace(RegExp(`{{${key}}}`, 'g'), data[key])\n\t})\n\treturn snippet;\n}\n\nconst renderLinkSection = (category) => {\n\tconst { categoryHeaderContent } = model;\n\tconst { description, activated, title } = categoryHeaderContent[category];\n\tconst list = renderTemplate(model.templates.list_body);\n\trenderTemplate(getLinks(category).map(item => hydrateTemplate(model.templates.list_item, Object.assign(item, { is_checked: item.activated ? 'checked' : '' }))).join(''), list);\n\treturn getLinks(category).length ? [\n\t\thydrateTemplate(\n\t\t\tmodel.templates.list_header, {\n\t\t\t\tcategory,\n\t\t\t\ttitle,\n\t\t\t\tdescription,\n\t\t\t\tis_checked: model.data\n\t\t\t\t\t.filter(item => item.category == category)\n\t\t\t\t\t.every(item => item.activated === false) ? '' : 'checked',\n\t\t\t}\n\t\t),\n\t\tlist.outerHTML\n\t].join(''):\n\t\t'';\n}\n\nconst render = () => {\n\tconst { categoryHeaderContent, templates, themePicklistValues, themeSelected } = model;\n\tif(!document.getElementById(WRAPPER_ID)) document.body.insertAdjacentHTML('beforeend', `<div id=\"${WRAPPER_ID}\"></div>`);\n\trenderTemplate(templates.container, document.getElementById(WRAPPER_ID));\n\tconst container = renderTemplate([\n\t\ttemplates.content\n\t].join(''), document.querySelector(\".extension-view-container\"));\n\tconst content = renderTemplate([\n\t\ttemplates.header,\n\t\ttemplates.body,\n\t].join(''), document.querySelector(\".extension-view-content\"));\n  const sldsLinks = renderLinkSection(CATEGORY_SLDS);\n  const customLinks = renderLinkSection('custom');\n\tconst styleTags = renderLinkSection('styleTag');\n\n\tconst themePicklist = hydrateTemplate(\n\t\ttemplates.theme_picklist,\n\t\t{\n\t\t\tselected_value: themePicklistValues.find(option => option.category == themeSelected).item_value\n\t\t}\n\t);\n\n\tconst picklistOptions = themePicklistValues.map(option =>\n\t\thydrateTemplate(\n\t\t\ttemplates.theme_picklist_option,\n\t\t\tObject.assign({}, option, {\n\t\t\t\tis_selected: themeSelected == option.category ? 'slds-is-selected' : '',\n\t\t\t\tpartial_icon_check: templates.icon_check,\n\t\t\t\tpartial_selected_a11y_label: templates.list_item_partial_selected_a11y_label\n\t\t})\n\t));\n\n\t// const items = model.data.map(item => hydrateTemplate(templates.list_item, Object.assign(item, { is_checked: item.activated ? 'checked' : '' })));\n\trenderTemplate([themePicklist, sldsLinks, customLinks, styleTags].join(''), content.querySelector(\".extension-view-body\"));\n\trenderTemplate(picklistOptions.join(''), content.querySelector(\"#listbox-themes ul\"));\n}\n\nconst applyLightningStylesheetsCss = (contentWindow) => {\n  const contentDoc = contentWindow.document;\n  if(!contentDoc.querySelector(`.${SELECTOR_CSS_SLDS4VF}`)) {\n\t\tmodel.themeSelected = CATEGORY_LIGHTNING;\n    // Array.from(contentDoc.querySelectorAll(`${SELECTOR_CSS_LINK}, ${SELECTOR_STYLE_TAG}`))\n    //   .map(cssElement => {\n    //     deactivateCSSElement(cssElement);\n\t\t// \t});\n\n    const css = contentDoc.createElement(\"link\");\n    css.rel = \"stylesheet\";\n    // When testing local SLDS4VF\n\t\t// css.href = \"https://localhost:4443/styles/extension.css\";\n    // css.href=\"https://drive.google.com/a/salesforce.com/uc?authuser=0&id=0B2Qc3WrvwamZY3lvRmNJMWZaeUk&export=download\";\n    // css.href=\"https://design-system-visualforce.herokuapp.com/styles/extension.css?token=51828b28843be76b5715105e5a715003\";\n\t\t// css.href = \"http://lex4vf-dev.surge.sh/styles/production.css\";\n    css.href = model.orgLightningStylesheetsCssPath;\n\t\tcss.type = \"text/css\";\n    css.id = SELECTOR_CSS_SLDS4VF;\n    css.classList.add(SELECTOR_CSS_SLDS4VF);\n    contentDoc.head.appendChild(css);\n\t\tchrome.runtime.sendMessage({ msg: \"lightningStylesheetsActivated\", value: true });\n\t\thandleCategorySelection(CATEGORY_LIGHTNING);\n  }\n}\n\nconst handleCategoryStateFromChildClick = category => {\n\tconst categoryElements = model.data.filter(item => item.category == category);\n\tconst categoryCheckbox = document.getElementById(`checkbox_${category}`);\n\tif(categoryElements.every(item => item.activated === true)) {\n\t\t//turn on category check\n\t\tcategoryCheckbox.checked = true;\n\t\tcategoryCheckbox.indeterminate = false;\n\t} else if(categoryElements.every(item => item.activated === false)) {\n\t\t//turn off category check\n\t\tcategoryCheckbox.checked = false;\n\t\tcategoryCheckbox.indeterminate = false;\n\t} else {\n\t\t//turn on mixed\n\t\tcategoryCheckbox.indeterminate = true;\n\t}\n};\n\nconst deactivateCSSElement = element => {\n\telement.setAttribute(\"media\", \"max-width: 1px\");\n  element.classList.add(SELECTOR_CSS_DEACTIVATED);\n\tmodel.setActivation(element.id, false);\n  console.log(\"Deactivating:\", element.dataset.initCssUrl);\n  return element;\n}\n\nconst activateCSSElement = element => {\n\telement.removeAttribute('media');\n  element.classList.remove(SELECTOR_CSS_DEACTIVATED);\n\tmodel.setActivation(element.id, true);\n\tconsole.log(\"Activating:\", element.dataset.initCssUrl);\n  return element;\n}\n\nconst createRandomId = () => `${(new Date()).getTime()}-${Math.random()*10**17}`;\n\nconst getPageStyleSheets = () => {\n\tconst stylesheetsQuery = document.querySelectorAll(SELECTOR_CSS_LINK);\n\tif(stylesheetsQuery.length) {\n\t\tconst prevStylesheets = currentStylesheets.concat([]);\n\t\tcurrentStylesheets = Array.from(stylesheetsQuery);\n\t\tcurrentStylesheets\n\t\t\t.filter(cssLink => !cssLink.classList.contains(SELECTOR_CSS_PROCESSED))\n\t\t\t.map(cssLink => processCssLinks(cssLink));\n\t\tif(currentStylesheets.length != prevStylesheets.length) {\n\t\t\tconsole.log(\"CSS Found:\", document.querySelectorAll(SELECTOR_CSS_LINK));\n\t\t\trender();\n\t\t};\n\t}\n}\n\nconst getPageStyleTags = () => {\n\tconst styleTagsQuery = document.querySelectorAll(SELECTOR_STYLE_TAG);\n\tif(styleTagsQuery.length) {\n\t\tconst prevStyleTags = currentStyleTags.concat([]);\n\t\tcurrentStyleTags = Array.from(styleTagsQuery);\n\t\tcurrentStyleTags\n\t\t\t.filter(styleTag => !styleTag.classList.contains(SELECTOR_CSS_PROCESSED))\n\t\t\t.map(styleTag => processStyleTags(styleTag));\n\t\tif(currentStyleTags.length != prevStyleTags.length) {\n\t\t\tconsole.log(\"Style Tag Found:\", document.querySelectorAll(SELECTOR_STYLE_TAG));\n\t\t\trender();\n\t\t};\n\t}\n}\n\nconst handleCategorySelection = category => {\n\tconst elementDataSet = model.data.filter(elementData => [CATEGORY_CLASSIC,CATEGORY_LIGHTNING].includes(elementData.category) );\n\tif(category == CATEGORY_LIGHTNING\n\t\t&& !elementDataSet.find(elementData => elementData.category == CATEGORY_LIGHTNING))\n\t\tapplyLightningStylesheetsCss(window);\n\n\telementDataSet.map(elementData => (\n\t\ttoggleCSSElement(\n\t\t\tdocument.getElementById(elementData.id),\n\t\t\telementData.category == category\n\t\t)\n\t));\n\trender();\n}\n\nconst handlePickListSelect = (listItem) => {\n\tconst category = listItem.dataset.category;\n\tmodel.themeSelected = category;\n\thandleCategorySelection(category);\n}\n\nconst processCssLinks = cssLink => {\n  console.log(\"Processing:\", cssLink.getAttribute('href')); //cssLink\n\tconst href = cssLink.getAttribute('href');\n\tcssLink.id = createRandomId();\n\tcssLink.dataset.initCssUrl = cssLink.getAttribute('href');\n\tcssLink.classList.add(SELECTOR_CSS_PROCESSED);\n\tmodel.add(model.getCssLinkData(cssLink));\n  return cssLink;\n}\n\nconst processStyleTags = styleTag => {\n\tconsole.log(\"Processing:\", styleTag.innerHTML.trim().substring(0, 24) + \"…\"); //styleTag\n\tstyleTag.id = createRandomId();\n\tstyleTag.classList.add(SELECTOR_CSS_PROCESSED);\n\tmodel.add(model.getStyleTagData(styleTag));\n\treturn styleTag;\n}\n\nconst fetchTemplates = () => {\n\treturn fetch(chrome.runtime.getURL(URL_TEMPLATE))\n\t\t.then(response => response.text())\n\t\t.then(response => {\n\t\t\tconst wrapper = document.createElement('div');\n\t\t\twrapper.innerHTML = response;\n\t\t\tlet\n\t\t\t\t$templates = wrapper.querySelectorAll(\"template\"),\n\t\t\t\ttemplates = {};\n\t\t\tArray.from($templates).forEach(function(template){\n\t\t\t\ttemplates[template.id] = template.innerHTML.trim();\n\t\t\t});\n\t\t\tmodel.templates = templates;\n\t\t})\n}\n\nconst toggleCSSElement = (element, isChecked) => (\n\telement ?\n\t\tisChecked ?\n\t\t\tactivateCSSElement(element) :\n\t\t\tdeactivateCSSElement(element) :\n\t\tconsole.warn(\"Unable to find the CSS link element to de/activate\")\n)\n\nchrome.extension.sendMessage({}, function(response) {\n\tvar readyStateCheckInterval = setInterval(function() {\n\t\tif (document.readyState === \"complete\") {\n\t\t\tclearInterval(readyStateCheckInterval);\n\n\t\t\t// ----------------------------------------------------------\n\t\t\t// This part of the script triggers when page is done loading\n\t\t\tconsole.log(\"readyState\", window.location.href);\n\t\t\t// ----------------------------------------------------------\n\n\t\t\tlet confirmLoadCSS = null;\n\t\t  const hasVisualforceClasses = Boolean(window.document.querySelector('.apexp, .bPageBlock, .ext-chrome, .sfdcBody'));\n\t\t  const hasPageContent = Boolean(window.document.body.innerHTML.trim().length); // test for empty page\n\t\t\tconst isVisualforceFrame =\n\t\t\t\tRegExp(/vfFrameId_\\d+/).test(window.name); // ||\n\t\t\t\t// RegExp(/^\\/apex\\/|\\.apexp/).test(window.location.pathname); // test for frame with Visualforce page\n\t\t\tconst isValidVisualforcePage =\n\t\t\t\thasPageContent &&\n\t\t\t\t((window != top && isVisualforceFrame) ||\n\t\t\t\t(window == top && hasVisualforceClasses ));\n\n\t\t\tdocument.body.addEventListener(\"change\", e => {\n\t\t\t\tconst clickedElement = event.target;\n\t\t\t\tconst toggle = (checkbox, value) => {\n\t\t\t\t\tif(value) {\n\t\t\t\t\t\tif(checkbox.checked !== value) checkbox.click();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcheckbox.click();\n\t\t\t\t\t}\n\t\t\t\t\treturn checkbox;\n\t\t\t\t}\n\n\t\t\t\tif(clickedElement.classList.contains(\"category-check\")) {\n\t\t\t\t\tmodel.data\n\t\t\t\t\t\t.filter(elementData => elementData.category == clickedElement.dataset.cssCategory)\n\t\t\t\t\t\t.map(elementData => (\n\t\t\t\t\t\t\ttoggleCSSElement(\n\t\t\t\t\t\t\t\tdocument.getElementById(elementData.id),\n\t\t\t\t\t\t\t\tclickedElement.checked\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t));\n\t\t\t\t\trender();\n\t\t\t\t}\n\n\t\t    if(clickedElement.classList.contains(\"list-item-check\")) {\n\t\t\t\t\ttoggleCSSElement(\n\t\t\t\t\t\tdocument.getElementById(clickedElement.dataset.cssNodeId),\n\t\t\t\t\t\tclickedElement.checked\n\t\t\t\t\t)\n\t\t\t\t\thandleCategoryStateFromChildClick(clickedElement.dataset.cssCategory);\n\t\t    }\n\t\t\t})\n\n\t\t\tdocument.body.addEventListener(\"click\", e => {\n\t\t\t\tif(e.target.classList.contains(\"button-panel-close\")) togglePanel();\n\t\t\t\tif(e.target.classList.contains(\"button-apply-lss\")) applyLightningStylesheetsCss(window);\n\t\t\t})\n\n\t\t\tdocument.body.addEventListener(\"mousedown\", e => {\n\t\t\t\tconst target = e.target.classList.contains(\"slds-listbox__option\") ? e.target : e.target.closest(\".slds-listbox__option\");\n\t\t\t\tif(target) {\n\t\t\t\t\thandlePickListSelect(target);\n\t\t\t\t}\n\t\t\t})\n\n\t\t\twindow.addEventListener(\"focusin\", e => {\n\t\t    if(e.target.id == \"combobox-theme-select\") {\n\t\t\t\t\tdocument.querySelector(\".slds-combobox\").classList.add(\"slds-is-open\");\n\t\t\t\t}\n\t\t\t})\n\n\t\t\twindow.addEventListener(\"focusout\", e => {\n\t\t    if(e.target.id == \"combobox-theme-select\") {\n\t\t\t\t\tdocument.querySelector(\".slds-combobox\").classList.remove(\"slds-is-open\");\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tchrome.runtime.sendMessage({ msg: \"pageActionState\", value: isValidVisualforcePage });\n\n\t\t  if(isValidVisualforcePage) {\n\t\t\t\tfetchTemplates().then(() => {\n\t\t\t\t\tconsole.log(\"Initializing on:\", window.location.pathname);\n\t\t\t\t\tconst pollCSSLoaded = setInterval(getPageStyleSheets, 3000);\n\t\t\t\t\tgetPageStyleTags();\n\t\t\t    getPageStyleSheets();\n\n\t\t\t\t\tchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n\t\t\t\t\t\tconsole.log(sender.tab ?\n\t\t\t\t\t\t\t\"from a content script:\" + sender.tab.url :\n\t\t\t\t\t\t\t\"from the extension\");\n\t\t\t\t\t\tswitch(request.msg) {\n\t\t\t\t\t\t\tcase \"activateSlds4Vf\":\n\t\t\t\t\t      applyLightningStylesheetsCss(window);\n\t\t\t\t\t\t\t\treturn sendResponse({ msg: request.msg, complete: true });\n\t\t\t\t\t\t\tcase \"openPanel\":\n\t\t\t\t\t\t\t\treturn togglePanel(true);\n\t\t\t\t\t\t\tcase \"isLightningStylesheetsActive\":\n\t\t\t\t\t\t\t\treturn sendResponse({ msg: request.msg, value: model.isLightningStylesheetsActive() });\n\t\t\t\t\t\t\tcase \"isPanelOpen\":\n\t\t\t\t\t\t\t\treturn sendResponse({ msg: request.msg, value: document.getElementById(WRAPPER_ID).classList.contains(\"is-open\") });\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn { msg: `No Extension Message Handler for ${request}`}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t  }\n\t\t}\n\t}, 10);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!********************************!*\
  !*** ./src/inject/inject.scss ***!
  \********************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9pbmplY3QvaW5qZWN0LnNjc3M/YjU1OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2luamVjdC9pbmplY3Quc2Nzc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ]);