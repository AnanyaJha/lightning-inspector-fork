!function(n){var e={};function t(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return n[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var i in n)t.d(o,i,function(e){return n[e]}.bind(null,i));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=22)}({22:function(n,e,t){"use strict";if(!window.AuraInspector){var o=new function(){var n=null,e={"AuraInspector:publishbatch":!0,"AuraInspector:publish":!0,"AuraInspector:bootstrap":!0};function t(t){n&&e[t.data.action]&&n.postMessage(t.data)}function o(n){n&&n.data&&e[n.data.action]&&window.postMessage(n.data)}this.connect=function(e){if(!n){(n=chrome.runtime.connect()).onDisconnect.addListener(this.disconnect.bind(this));var t=window.document.createElement("script");t.src=chrome.extension.getURL("/dist/LightningInspectorInjectedScript.js"),t.async=t.defer=!1,t.onload=function(){this.parentNode.removeChild(this),e&&e()},(document.head||document.documentElement).appendChild(t)}},this.disconnect=function(){window.removeEventListener("message",t),n.onMessage.removeListener(o),n=null},this.init=function(){this.connect(()=>{this.injectBootstrap()}),window.addEventListener("message",t),n.onMessage.addListener(o)},this.injectBootstrap=function(){var n=document.createElement("script");n.textContent=n.text='\n                /**  Aura Inspector Script, ties into $A.initAsync and $A.initConfig to initialize the inspector as soon as possible. **/\n                (function(global){\n                    var injectedScript = Symbol.for(\'AuraDevTools\');\n                    function wrap(obj, original, before, after) {/*from 204 and beyond, we no longer need this wrap*/\n                        return function() {\n                            if(before) before.apply(obj, arguments);\n                            var returnValue = original.apply(obj, arguments);\n                            if(after) after.apply(obj, arguments);\n                            return returnValue;\n                        }\n                    }\n                    var initialized = false;\n                    function notifyDevTools() {\n                        if(initialized) { return; }\n                        // Try to bootstrap, this way all the actions get caught as postMessage is async.\n                        window[injectedScript].Inspector.instrument();\n                        window.postMessage({\n                            action  : "AuraInspector:publish",\n                            key: "AuraInspector:OnAuraInitialized",\n                            data: "ContentScript: notifyDevTools()"\n                        }, window.location.origin);\n                        // Only do once.\n                        initialized = true;\n                    }\n\n                    // Since we were injected, Aura could already be available. If so, let the devtools know.\n                    if(!global.$A || !(global.$A.getContext && global.$A.getContext())) {\n                        var _Aura = global.Aura;\n                        Object.defineProperty(global, "Aura", {\n                            enumerable: true,\n                            configurable: true,\n                            get: function() { return _Aura; },\n                            set: function(val) {\n                                val.beforeFrameworkInit = val.beforeFrameworkInit || [];\n                                val.beforeFrameworkInit.push(notifyDevTools);\n                                _Aura = val;\n                            }\n                        });\n                        var _$A = global.$A;\n                        Object.defineProperty(global, "$A", {/*from 204 and beyond, we no longer need this set*/\n                            enumerable: true,\n                            configurable: true,\n                            get: function() { return _$A; },\n                            set: function(val) {\n                                if(val && val.initAsync) {\n                                    val.initAsync = wrap(val, val.initAsync, notifyDevTools);\n                                }\n                                if(val && val.initConfig) {\n                                    val.initConfig = wrap(val, val.initConfig, notifyDevTools);\n                                }\n\n                                _$A = val;\n\n                            }\n                        });\n                    }\n                })(this);\n            ',document.documentElement.appendChild(n)},this.isConnected=function(){return!!n}};o.init(),window.AuraInspector=window.AuraInspector||{},window.AuraInspector.ContentScript=o}}});