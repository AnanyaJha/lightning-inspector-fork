!function(a){function b(d){if(c[d])return c[d].exports;var e=c[d]={exports:{},id:d,loaded:!1};return a[d].call(e.exports,e,e.exports,b),e.loaded=!0,e.exports}var c={};b.m=a,b.c=c,b.p="",b(0)}([function(a,b){"use strict";if(!window.AuraInspector){var c=function(){function a(a){c&&d[a.data.action]&&c.postMessage(a.data)}function b(a){a&&a.data&&d[a.data.action]&&window.postMessage(a.data)}var c=null,d={"AuraInspector:publishbatch":!0,"AuraInspector:publish":!0,"AuraInspector:bootstrap":!0};this.connect=function(){if(!c){c=chrome.runtime.connect(),c.onDisconnect.addListener(this.disconnect.bind(this));var a=window.document.createElement("script");a.src=chrome.extension.getURL("/dist/LightningInspectorInjectedScript.js"),a.async=a.defer=!1,a.onload=function(){this.parentNode.removeChild(this)},(document.head||document.documentElement).appendChild(a)}},this.disconnect=function(){window.removeEventListener("message",a),c.onMessage.removeListener(b),c=null},this.init=function(){this.connect(),this.injectBootstrap(),window.addEventListener("message",a),c.onMessage.addListener(b)},this.injectBootstrap=function(){var a=document.createElement("script");a.textContent=a.text='\n                /**  Aura Inspector Script, ties into $A.initAsync and $A.initConfig to initialize the inspector as soon as possible. **/\n                (function(global){\n                    var injectedScript = Symbol.for(\'AuraDevTools\');\n                    function wrap(obj, original, before, after) {/*from 204 and beyond, we no longer need this wrap*/\n                        return function() {\n                            if(before) before.apply(obj, arguments);\n                            var returnValue = original.apply(obj, arguments);\n                            if(after) after.apply(obj, arguments);\n                            return returnValue;\n                        }\n                    }\n                    var initialized = false;\n                    function notifyDevTools() {\n                        if(initialized) { return; }\n                        // Try to bootstrap, this way all the actions get caught as postMessage is async.\n                        window[injectedScript].Inspector.instrument();\n                        window.postMessage({\n                            action  : "AuraInspector:publish",\n                            key: "AuraInspector:OnAuraInitialized",\n                            data: "ContentScript: notifyDevTools()"\n                        }, window.location.origin);\n                        // Only do once.\n                        initialized = true;\n                    }\n\n                    // Since we were injected, Aura could already be available. If so, let the devtools know.\n                    if(!global.$A || !(global.$A.getContext && global.$A.getContext())) {\n                        var _Aura = global.Aura;\n                        Object.defineProperty(global, "Aura", {\n                            enumerable: true,\n                            configurable: true,\n                            get: function() { return _Aura; },\n                            set: function(val) {\n                                val.beforeFrameworkInit = val.beforeFrameworkInit || [];\n                                val.beforeFrameworkInit.push(notifyDevTools);\n                                _Aura = val;\n                            }\n                        });\n                        var _$A = global.$A;\n                        Object.defineProperty(global, "$A", {/*from 204 and beyond, we no longer need this set*/\n                            enumerable: true,\n                            configurable: true,\n                            get: function() { return _$A; },\n                            set: function(val) {\n                                if(val && val.initAsync) {\n                                    val.initAsync = wrap(val, val.initAsync, notifyDevTools);\n                                }\n                                if(val && val.initConfig) {\n                                    val.initConfig = wrap(val, val.initConfig, notifyDevTools);\n                                }\n\n                                _$A = val;\n\n                            }\n                        });\n                    }\n                })(this);\n            ',document.documentElement.appendChild(a)},this.isConnected=function(){return!!c}},d=new c;d.init(),window.AuraInspector=window.AuraInspector||{},window.AuraInspector.ContentScript=d}}]);